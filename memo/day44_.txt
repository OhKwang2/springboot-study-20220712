@http 프로토콜

	#http프로토콜 개요
	-  https://developer.mozilla.org/ko/docs/Web/HTTP/Overview
	- 프로토콜 = 인터페이스
	- Hypertext Transfer Protocol
	- Request <- JSP에서는 String만 됨.
	- Spring boot 에서는 알아서 자료형 찾아줌
	  (@RequestParam)

	#응답코드
	- 1XX (조건부 응답)
	- 2XX (성공) : 클라이언트가 요청한 동작을 수신하여 이해했고 승낙했으며 성공적으로 처리했음
	- 3XX (리다이렉션 완료) : 클라이언트 요청을 마치기 위해 추가 동작을 취해야 함.
	- 4XX (요청 오류) : 클라이언트에 오류가 있음을 나타냄
	  (403 <- 권한 문제)
	  (400 <- bad request 형식을 지키지 않고 요청)
	  (404 <- 서버와 통신을 할 수 있으나 내가 요청한 것을 찾을 수 없음)
	- 5XX (서버 오류) : 서버가 유효한 요청을 명백하게 수행하지 못했음.

	  (500 <- 서버가 정상작동 안 함)
	
	#URL
	- http://도메인 <- URL
	- 도메인 뒤 요청 주소(자원) <- URI

	#REST API
	-https://meetup.toast.com/posts/92
	- 자원 (RESOURCE) - URI
	- 행위 (Verb) - HTTP METHOD
	- 표현 (Representations)

	# REST의 특징
	- Uniform (유니폼 인터페이스)
	  URI로 지정한 리소스에 대한 조작을 통일되고 한정적인 인터페이스로 수행하는 아키텍처 스타일
	  (ex. get/api/v1/board/content/1
	       get/api/v1/board/content/2)
	- Stateless (무상태성)
	  API서버는 들어오는 요청만 단순히 처리하기 때문에 서비스의 자유도가 높아지고 서버에 불필요한 정보를 관리하지 않음으로써 구현이 단순해짐
	  (현실적으로 불가능. 쿠키나 세션 어쨋든 사용해야 함. 고로 꼭 필요한곳만 쓰라는 의미)
	- Cashable (캐시 가능)
	  캐시란? 동일한 요청을 계속 하는데 응답도 같을 경우 클라이언트와 서버 중간에 캐시라는 곳에 넣어놓고 서버를 거치지 않고 응답
	  HTTP가 가진 캐시 기능 적용 가능
	- Self-descriptiveness (자체 표현 구조)
	  REST API 메시지만 보고도 이를 쉽게 이해할 수 있는 자체 표현 구조
	  (ex. api/v1/board/content)
	- Client - Server 구조
	  REST 서버는 API 제공, 클라이언트는 사용자 인증이나 컨텍스트 (세션, 로그인 정보) 등을 직접 관리하는 구조
	- 계층형 구조
	  REST 서버는 다중 계층으로 구성될 수 있으며, 보안(서버 - 클라이언트), 로드 밸런싱(요청이 많은 경우 하나의 서버로 감당하기 힘들기 때문에 서버를 분산 l4(전송 - TCP/IP 응답속도가 빠르고 비용 적게 듦) or l7(응용프로그램 - 요청을 세분화해서 구분하여 처리할 수 있지만 비용이 많이 듦)), 암호화 계층을 추가해 구조상의 유연성을 둘 수 있고, PROXY(대리인 - 대신 처리해주는 역할), 게이트웨(네트워크 기반에서 그룹별로 묶어 해당 그룹에서 처리할 수 있게끔 분리)이 같은 네트워크 기반의 중간매체를 사용할 수 있게함.
	  
	#REST API 디자인 가이드
	1. URI는 정보의 자원을 표현해야 한다.
	2. 자원에 대한 행위는 HTTP Method로 표현한다.
	#URI 설계 시 주의할 점
	- 슬래시 구분자(/)는 계층 관계를 나타내는 데 사용 (- 이런거 쓰면 안 됨)
	- URI 마지막 문자로 슬래시(/)를 포함하지 않는다.
	- 하이픈(-)은 URI 가독성을 높이는데 사용
	- 밑줄(_)은 URI에 사용하지 않는다.
	- URI 경로에는 소문자가 적합하다.
	- 파일 확장자는 URI에 포함시키지 않는다.
	  (파일 확장자는 헤더에 이미 들어있음)


@Spring DI,  IoC
	- https://velog.io/@gillog/Spring-DIDependency-Injection
	
	#DI(의존성 주입)
	- 내부에서 생성하는 방법과 외부에서 만들고 setter() or 생성자를 사용하는 방법 2가지가 있음.
	- 후자가 제대로된 객체지향 프로그래밍임
	- 의존성을 외부에서 주입시켜야 함.
	
	#IoC(Inversion of Control)
	- "제어의 역전"이라는 의미로, 메소드나 객체의 호출작업을 개발자가 결정하는 것이 아니라 외부에서 결정되는 것을 의미(Spring Frame work이 모든 제어를 가짐)
	-하나의 컨테이너를 의미
	- @Component 생성하면 컨테이너에 객체를 하나 만들어서 등록함. 단, Interface 또는 추상클래스가 필요함. 
	- @Component에는 @Controller, Service, Repository가 들어있음


	
	



	 







